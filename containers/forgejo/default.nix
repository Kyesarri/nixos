/*
Forgejo is a self-hosted lightweight software forge.
Easy to install and low maintenance, it just does the job.
*/
/*
TODO
custom themes dir:
"/public/assets/css"
*/
{
  config,
  pkgs,
  lib,
  ...
}:
with lib; let
  cfg = config.cont.forgejo;
in {
  options.cont.forgejo = {
    enable = mkOption {
      type = types.bool;
      default = false;
    };
    cloudflared-token = mkOption {
      type = types.str;
      default = "";
    };
    db-pass = mkOption {
      type = types.str;
      default = "";
    };
  };

  config = mkMerge [
    (mkIf (cfg.enable == true) {
      # create dir on host for custom themes
      system.activationScripts."make-forgejo-theme-dir" =
        lib.stringAfter ["var"]
        ''mkdir -v -p /etc/oci.cont/forgejo/css & chown -R 1000:1000 /etc/oci.cont/forgejo'';

      # symlink from tree to above dir on host
      environment.etc = {
        "oci.cont/forgejo/css/horizon-dark.css" = {
          source = ./horizon-dark.css;
          mode = "644";
          uid = 1000;
          gid = 1000;
        };
      };

      systemd = {
        targets."podman-forgejo-root" = {
          wantedBy = ["multi-user.target"];
          unitConfig = {Description = "Root target generated by compose2nix.";};
        };

        services = {
          "podman-forgejo-db" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = ["podman-network-forgejo.service"];
            requires = ["podman-network-forgejo.service"];
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
          };

          "podman-forgejo" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = ["podman-network-forgejo.service"];
            requires = ["podman-network-forgejo.service"];
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
          };

          "podman-forgejo-cloudflared" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = [
              "podman-network-forgejo.service"
              "podman-forgejo.service"
            ];
            requires = ["podman-network-forgejo.service"];
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
          };

          "podman-volume-forgejo" = {
            path = [pkgs.podman];
            script = ''podman volume inspect forgejo || podman volume create forgejo'';
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
            };
          };

          "podman-volume-forgejo-db" = {
            path = [pkgs.podman];
            script = ''podman volume inspect forgejo-db || podman volume create forgejo-db'';
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
            };
          };

          "podman-network-forgejo" = {
            path = [pkgs.podman];
            script = ''podman network inspect forgejo || podman network create forgejo'';
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
              ExecStop = "podman network rm -f forgejo";
            };
          };
        };
      };

      # Containers
      virtualisation.oci-containers.containers = {
        "forgejo" = {
          image = "codeberg.org/forgejo/forgejo:7";
          environment = {
            "FORGEJO__database__DB_TYPE" = "postgres";
            "FORGEJO__database__HOST" = "forgejo-db:5432";
            "FORGEJO__database__NAME" = "forgejo";
            "FORGEJO__database__PASSWD" = "${cfg.db-pass}";
            "FORGEJO__database__USER" = "forgejo";
            "GITEA_CUSTOM" = "/data/gitea";
            "USER_GID" = "1000";
            "USER_UID" = "1000";
          };
          volumes = [
            "/etc/localtime:/etc/localtime:ro"
            "forgejo:/data:rw"
            # symlink our custom theme dir into container
            "/etc/oci.cont/forgejo:/public/assets:ro"
          ];
          ports = [
            # "3000:3000/tcp"
            # "222:22/tcp"
          ];
          dependsOn = [
            "forgejo-db"
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=server"
            "--network=forgejo"
          ];
        };

        "forgejo-db" = {
          image = "postgres:14";
          environment = {
            "POSTGRES_DB" = "forgejo";
            "POSTGRES_PASSWORD" = "${cfg.db-pass}";
            "POSTGRES_USER" = "forgejo";
          };
          volumes = [
            "forgejo-db:/var/lib/postgresql/data:rw"
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=forgejo-db"
            "--network=forgejo"
          ];
        };

        "forgejo-cloudflared" = {
          log-driver = "journald";
          image = "cloudflare/cloudflared:latest";
          environment = {
            "TZ" = "Australia/Melbourne";
            "TUNNEL_TOKEN" = "${cfg.cloudflared-token}";
            "USER_GID" = "1";
          };
          cmd = ["tunnel" "--no-autoupdate" "run"];
          extraOptions = [
            "--network-alias=forgejo-cloudflared"
            "--network=forgejo"
          ];
        };
      };
    })
  ];
}
