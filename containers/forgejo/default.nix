/*
Forgejo is a self-hosted lightweight software forge.
Easy to install and low maintenance, it just does the job.
*/
/*
TODO
custom themes dir:
"/public/assets/css"
*/
{
  config,
  pkgs,
  lib,
  ...
}:
with lib; let
  cfg = config.cont.forgejo;
in {
  options.cont.forgejo = {
    enable = mkOption {
      type = types.bool;
      default = false;
    };
    cloudflared-token = mkOption {type = types.str;};
    db_pass = mkOption {type = types.str;};
    lfs_jwt_secret = mkOption {type = types.str;};
    internal_token = mkOption {type = types.str;};
    jwt_secret = mkOption {type = types.str;};
  };

  config = mkMerge [
    (mkIf (cfg.enable == true) {
      # create dir on host for custom themes
      system.activationScripts."make-forgejo-theme-dir" =
        lib.stringAfter ["var"]
        ''mkdir -v -p /etc/oci.cont/forgejo/css /etc/oci.cont/forgejo/conf & chown -R 1000:1000 /etc/oci.cont/forgejo'';

      # symlink from tree to above dir on host
      environment.etc = {
        "oci.cont/forgejo/css/horizon-dark.css" = {
          source = ./horizon-dark.css;
          mode = "644";
          uid = 1000;
          gid = 1000;
        };
      };
      "oci.cont/forgejo/custom/app.ini" = {
        mode = "644";
        uid = 1000;
        gid = 1000;
        text = ''
          APP_NAME = galing
          RUN_MODE = prod
          RUN_USER = git
          WORK_PATH = /data/gitea

          [repository]
          ROOT = /data/git/repositories

          [repository.local]
          LOCAL_COPY_PATH = /data/gitea/tmp/local-repo

          [repository.upload]
          TEMP_PATH = /data/gitea/uploads

          [server]
          APP_DATA_PATH = /data/gitea
          DOMAIN = git.galing.org
          SSH_DOMAIN = git.galing.org
          HTTP_PORT = 3000
          ROOT_URL = https://git.galing.org/
          DISABLE_SSH = false
          SSH_PORT = 22
          SSH_LISTEN_PORT = 22
          LFS_START_SERVER = true
          LFS_JWT_SECRET = ${cfg.lfs_jwt_secret}
          OFFLINE_MODE = true

          [database]
          PATH = /data/gitea/gitea.db
          DB_TYPE = postgres
          HOST = forgejo-db:5432
          NAME = forgejo
          USER = forgejo
          PASSWD = ${cfg.db_pass}
          LOG_SQL = false
          SCHEMA = public
          SSL_MODE = disable

          [indexer]
          ISSUE_INDEXER_PATH = /data/gitea/indexers/issues.bleve

          [session]
          PROVIDER_CONFIG = /data/gitea/sessions
          PROVIDER = file

          [picture]
          AVATAR_UPLOAD_PATH = /data/gitea/avatars
          REPOSITORY_AVATAR_UPLOAD_PATH = /data/gitea/repo-avatars

          [attachment]
          PATH = /data/gitea/attachments

          [log]
          MODE = console
          LEVEL = info
          ROOT_PATH = /data/gitea/log

          [security]
          INSTALL_LOCK = true
          SECRET_KEY =
          REVERSE_PROXY_LIMIT = 1
          REVERSE_PROXY_TRUSTED_PROXIES = *
          INTERNAL_TOKEN = ${cfg.internal_token}
          PASSWORD_HASH_ALGO = pbkdf2_hi

          [service]
          DISABLE_REGISTRATION = true
          REQUIRE_SIGNIN_VIEW = false
          REGISTER_EMAIL_CONFIRM = false
          ENABLE_NOTIFY_MAIL = false
          ALLOW_ONLY_EXTERNAL_REGISTRATION = false
          ENABLE_CAPTCHA = false
          DEFAULT_KEEP_EMAIL_PRIVATE = false
          DEFAULT_ALLOW_CREATE_ORGANIZATION = true
          DEFAULT_ENABLE_TIMETRACKING = false
          NO_REPLY_ADDRESS = noreply.localhost

          [lfs]
          PATH = /data/git/lfs

          [mailer]
          ENABLED = false

          [openid]
          ENABLE_OPENID_SIGNIN = true
          ENABLE_OPENID_SIGNUP = true

          [cron.update_checker]
          ENABLED = true

          [repository.pull-request]
          DEFAULT_MERGE_STYLE = merge

          [repository.signing]
          DEFAULT_TRUST_MODEL = committer

          [oauth2]
          JWT_SECRET = ${cfg.jwt_secret}
        '';
      };

      systemd = {
        targets."podman-forgejo-root" = {
          wantedBy = ["multi-user.target"];
          unitConfig = {Description = "Root target generated by compose2nix.";};
        };

        services = {
          "podman-forgejo-db" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = ["podman-network-forgejo.service"];
            requires = ["podman-network-forgejo.service"];
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
          };

          "podman-forgejo" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = ["podman-network-forgejo.service"];
            requires = ["podman-network-forgejo.service"];
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
          };

          "podman-forgejo-cloudflared" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = [
              "podman-network-forgejo.service"
              "podman-forgejo.service"
            ];
            requires = ["podman-network-forgejo.service"];
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
          };

          "podman-volume-forgejo" = {
            path = [pkgs.podman];
            script = ''podman volume inspect forgejo || podman volume create forgejo'';
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
            };
          };

          "podman-volume-forgejo-db" = {
            path = [pkgs.podman];
            script = ''podman volume inspect forgejo-db || podman volume create forgejo-db'';
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
            };
          };

          "podman-network-forgejo" = {
            path = [pkgs.podman];
            script = ''podman network inspect forgejo || podman network create forgejo'';
            partOf = ["podman-forgejo-root.target"];
            wantedBy = ["podman-forgejo-root.target"];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
              ExecStop = "podman network rm -f forgejo";
            };
          };
        };
      };

      # Containers
      virtualisation.oci-containers.containers = {
        "forgejo" = {
          image = "codeberg.org/forgejo/forgejo:7";
          environment = {
            "FORGEJO__database__DB_TYPE" = "postgres";
            "FORGEJO__database__HOST" = "forgejo-db:5432";
            "FORGEJO__database__NAME" = "forgejo";
            "FORGEJO__database__PASSWD" = "${cfg.db_pass}";
            "FORGEJO__database__USER" = "forgejo";
            "FORGEJO_CUSTOM" = "/public/assets";
            "USER_GID" = "1000";
            "USER_UID" = "1000";
          };
          volumes = [
            "/etc/localtime:/etc/localtime:ro"
            "forgejo:/data:rw"
            # symlink our custom theme dir into container
            "/etc/oci.cont/forgejo:/public/assets:ro"
          ];
          ports = [
            # "3000:3000/tcp"
            # "222:22/tcp"
          ];
          dependsOn = [
            "forgejo-db"
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=server"
            "--network=forgejo"
          ];
        };

        "forgejo-db" = {
          image = "postgres:14";
          environment = {
            "POSTGRES_DB" = "forgejo";
            "POSTGRES_PASSWORD" = "${cfg.db_pass}";
            "POSTGRES_USER" = "forgejo";
          };
          volumes = [
            "forgejo-db:/var/lib/postgresql/data:rw"
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=forgejo-db"
            "--network=forgejo"
          ];
        };

        "forgejo-cloudflared" = {
          log-driver = "journald";
          image = "cloudflare/cloudflared:latest";
          environment = {
            "TZ" = "Australia/Melbourne";
            "TUNNEL_TOKEN" = "${cfg.cloudflared-token}";
            "USER_GID" = "1";
          };
          cmd = ["tunnel" "--no-autoupdate" "run"];
          extraOptions = [
            "--network-alias=forgejo-cloudflared"
            "--network=forgejo"
          ];
        };
      };
    })
  ];
}
