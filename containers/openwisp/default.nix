{
  lib,
  pkgs,
  config,
  ...
}:
with lib; let
  cfg = config.cont.openwisp;
in {
  options.cont.openwisp = {
    #
    enable = mkOption {
      type = types.bool;
      default = false;
      example = true;
      description = "enable container";
    };
  };

  config = mkMerge [
    (mkIf (cfg.enable == true) {
      systemd.targets."podman-compose-openwisp-root" = {
        unitConfig = {
          Description = "Root target generated by compose2nix.";
        };
        wantedBy = ["multi-user.target"];
      };

      systemd.services."podman-openwisp-redis" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "no";
        };
        after = ["podman-network-openwisp.service"];
        requires = ["podman-network-openwisp.service"];
        partOf = ["podman-compose-openwisp-root.target"];
        wantedBy = ["podman-compose-openwisp-root.target"];
      };

      systemd.services."podman-network-openwisp" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "podman network rm -f openwisp";
        };
        script = ''
          podman network inspect openwisp || podman network create openwisp
        '';
        partOf = ["podman-compose-openwisp-root.target"];
        wantedBy = ["podman-compose-openwisp-root.target"];
      };
      /*
      # Builds
      systemd.services."podman-build-openwisp-controller" = {
        path = [pkgs.podman pkgs.git];
        serviceConfig = {
          Type = "oneshot";
          TimeoutSec = 300;
        };
        script = ''
          git clone https://github.com/openwisp/openwisp-controller /etc/oci.cont/openwisp-controller
          cd /etc/oci.cont/openwisp-controller
          podman build -t openwisp/controller-development:latest .
        '';
      };
      */
      systemd.services."podman-openwisp-postgres" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "no";
        };
        after = ["podman-network-openwisp.service"];
        requires = ["podman-network-openwisp.service"];
        partOf = ["podman-compose-openwisp-root.target"];
        wantedBy = ["podman-compose-openwisp-root.target"];
      };

      systemd.services."podman-openwisp-controller" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "no";
        };
        after = ["podman-network-openwisp.service"];
        requires = ["podman-network-openwisp.service"];
        partOf = ["podman-compose-openwisp-root.target"];
        wantedBy = ["podman-compose-openwisp-root.target"];
      };

      # Containers
      virtualisation.oci-containers.containers."openwisp-controller" = {
        image = "openwisp/controller-development:latest";
        environment = {
          "REDIS_URL" = "redis://redis:6379";
        };
        ports = [
          "8000:8000/tcp"
        ];
        dependsOn = [
          "openwisp-redis"
        ];
        log-driver = "journald";
        extraOptions = [
          "--network-alias=controller"
          "--network=openwisp"
        ];
      };

      virtualisation.oci-containers.containers."openwisp-postgres" = {
        image = "postgis/postgis:17-3.5-alpine";
        environment = {
          "POSTGRES_DB" = "openwisp2";
          "POSTGRES_PASSWORD" = "openwisp2";
          "POSTGRES_USER" = "openwisp2";
        };
        ports = [
          "5432:5432/tcp"
        ];
        log-driver = "journald";
        extraOptions = [
          "--network-alias=postgres"
          "--network=openwisp"
        ];
      };

      virtualisation.oci-containers.containers."openwisp-redis" = {
        image = "redis:alpine";
        ports = [
          "6379:6379/tcp"
        ];
        log-driver = "journald";
        extraOptions = [
          "--entrypoint=[\"redis-server\", \"--appendonly\", \"yes\"]"
          "--network-alias=redis"
          "--network=openwisp"
        ];
      }; # close containers
    })
  ];
}
