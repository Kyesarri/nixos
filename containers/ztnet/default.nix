/*
ZTNET - ZeroTier Controller Web UI is a robust and versatile application designed to transform the management of ZeroTier networks.
Now featuring organization and multi-user support, it elevates the network management experience, accommodating team-based environments and larger organizations seamlessly.
# added some c2n configs here working additional systemd units and networking configs
*/
{
  secrets, # temp workaround until i make heaps of options :)
  config,
  pkgs,
  lib,
  ...
}:
with lib; let
  cfg = config.cont.ztnet;
in {
  options.cont.ztnet = {
    #
    enable = mkOption {
      type = types.bool;
      default = false;
      example = true;
      description = "enable container";
    };
    #
    /*
    macvlanIp = mkOption {
      type = types.nullOr types.str;
      default = "";
      example = "10.10.10.1";
      description = "container macvlan ip address";
    };
    */
    #
    /*
    vlanIp = mkOption {
      type = types.nullOr types.str;
      default = "";
      example = "12.12.12.1";
      description = "backend network ip address";
    };
    */
    #
    contName = mkOption {
      type = types.str;
      default = "ztnet-${config.networking.hostName}";
      example = "container-cool-hostname";
      description = "container name and container volume dirs";
    };

    timeZone = mkOption {
      type = types.str;
      default = "Australia/Melbourne";
      example = "Australia/Broken_Hill";
      description = "database timezone";
    };
    #
    /*
    image = mkOption {
      type = types.str;
      default = "zyclonite/zerotier:1.14.2";
      example = "zyclonite/zerotier:1.14.2";
      description = "container image";
    };
    */
  };

  config = mkMerge [
    (mkIf (cfg.enable == true) {
      # if this fails, maybe investigate the podman-method of making volumes...
      system.activationScripts."make${cfg.contName}dir" =
        lib.stringAfter ["var"]
        ''mkdir -v -p /etc/oci.cont/${cfg.contName}/zerotier /etc/oci.cont/${cfg.contName}/postgres /etc/oci.cont/${cfg.contName}/ztnet & chown -R 1000:1000 /etc/oci.cont/${cfg.contName}'';

      systemd = {
        # root service
        targets."podman-ztnet-root" = {
          unitConfig = {
            Description = "Root target generated by compose2nix.";
          };
          wantedBy = ["multi-user.target"];
        };

        services = {
          # network
          "podman-ztnetwork" = {
            script = ''podman network inspect ztnetwork || podman network create ztnetwork --driver=bridge --subnet=10.0.0.0/29'';
            partOf = ["podman-ztnet-root.target"];
            wantedBy = ["podman-ztnet-root.target"];
            path = [pkgs.podman];
            serviceConfig = {
              Type = "oneshot";
              RemainAfterExit = true;
              ExecStop = "podman network rm -f ztnetwork";
            };
          };
          # systemd services for containers
          "podman-postgres-${cfg.contName}" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = ["podman-ztnetwork.service"];
            requires = ["podman-ztnetwork.service"];
            partOf = ["podman-ztnet-root.target"];
            wantedBy = ["podman-ztnet-root.target"];
          };
          "podman-ztnet-${cfg.contName}" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = ["podman-ztnetwork.service"];
            requires = ["podman-ztnetwork.service"];
            partOf = ["podman-ztnet-root.target"];
            wantedBy = ["podman-ztnet-root.target"];
          };
          "podman-zerotier-${cfg.contName}" = {
            serviceConfig = {Restart = lib.mkOverride 90 "always";};
            after = ["podman-ztnetwork.service"];
            requires = ["podman-ztnetwork.service"];
            partOf = ["podman-ztnet-root.target"];
            wantedBy = ["podman-ztnet-root.target"];
          };
        };
      };

      # TODO - add multiple images to pull place above in let / in
      # environment.shellAliases = {cont-ztnet = "sudo podman pull ${cfg.image}";};

      virtualisation.oci-containers.containers = {
        # postgres
        "postgres-${cfg.contName}" = {
          image = "postgres:15.2-alpine";
          environment = {
            TZ = "${cfg.timeZone}";
            "POSTGRES_DB" = "ztnet";
            "POSTGRES_PASSWORD" = "postgres";
            "POSTGRES_USER" = "postgres";
            PUID = "1000";
            PGID = "1000";
          };
          volumes = [
            "/etc/oci.cont/${cfg.contName}/postgres:/var/lib/postgresql/data:rw"
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=postgres"
            "--network=ztnetwork"
          ];
        };
        # zerotier
        "zerotier-${cfg.contName}" = {
          autoStart = true;
          image = "zyclonite/zerotier:1.14.2";
          volumes = [
            "/etc/localtime:/etc/localtime:ro"
            "/etc/oci.cont/${cfg.contName}/zerotier:/var/lib/zerotier-one:rw"
          ];
          environment = {
            TZ = "${cfg.timeZone}";
            ZT_OVERRIDE_LOCAL_CONF = "true";
            ZT_ALLOW_MANAGEMENT_FROM = "10.0.0.0/29";

            PUID = "1000";
            PGID = "1000";
          };
          ports = ["9993:9993/udp"];
          log-driver = "journald";
          extraOptions = [
            "--cap-add=NET_ADMIN"
            "--cap-add=SYS_ADMIN"
            "--device=/dev/net/tun:/dev/net/tun:rwm"
            "--hostname=zerotier"
            "--network-alias=zerotier"
            "--network=ztnetwork"
            # "--network=macvlan_lan:ip=${cfg.macvlanIp}"
          ];
        };
        # ztnet
        "ztnet-${cfg.contName}" = {
          image = "sinamics/ztnet:latest";
          environment = {
            TZ = "${cfg.timeZone}";
            "NEXTAUTH_SECRET" = "random_secret";
            "NEXTAUTH_URL" = "http://localhost:3000";
            "NEXTAUTH_URL_INTERNAL" = "http://ztnet:3000";
            "POSTGRES_DB" = "ztnet";
            "POSTGRES_HOST" = "postgres";
            "POSTGRES_PASSWORD" = "postgres";
            "POSTGRES_PORT" = "5432";
            "POSTGRES_USER" = "postgres";
            PUID = "1000";
            PGID = "1000";
          };
          volumes = [
            "/etc/oci.cont/${cfg.contName}/ztnet:/var/lib/zerotier-one:rw"
          ];
          ports = ["3000:3000/tcp"];
          dependsOn = [
            "postgres"
            "zerotier"
          ];
          log-driver = "journald";
          extraOptions = [
            "--network-alias=ztnet"
            "--network=ztnetwork"
          ];
        };
      };
    })
  ];
}
